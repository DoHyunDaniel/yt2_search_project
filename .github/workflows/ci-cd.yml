name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 1'  # 매주 월요일 오전 2시 (한국 시간 오전 11시)

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # 🔍 코드 품질 검사
  # =============================================================================
  code-quality:
    name: 🔍 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy safety bandit
        
    - name: 🎨 Black 포맷팅 검사
      run: black --check --diff api/ crawler/
      
    - name: 📋 isort import 정렬 검사
      run: isort --check-only --diff api/ crawler/
      
    - name: 🔍 Flake8 린팅 검사
      run: flake8 api/ crawler/ --max-line-length=88 --extend-ignore=E203,W503,E501
      
    - name: 🔍 MyPy 타입 검사
      run: mypy api/ crawler/ --ignore-missing-imports
      
    - name: 🔒 Safety 보안 검사
      run: safety check --json --output safety-report.json || true
      
    - name: 🔒 Bandit 보안 검사
      run: bandit -r api/ crawler/ -f json -o bandit-report.json || true

  # =============================================================================
  # 🏗️ Docker 멀티 서비스 빌드
  # =============================================================================
  docker-build-base:
    name: 🏗️ Docker 빌드 (Base)
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🏗️ Base 이미지 빌드
      run: |
        docker build -f Dockerfile.base -t yt2-base:latest .
        docker images | grep yt2-base

  docker-build-services:
    name: 🏗️ Docker 빌드 (${{ matrix.service }})
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build-base]
    strategy:
      matrix:
        service: [api, crawler, frontend]
        
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🏗️ 서비스 이미지 빌드
      run: |
        if [ "${{ matrix.service }}" = "api" ]; then
          docker build -f api/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest .
        elif [ "${{ matrix.service }}" = "crawler" ]; then
          docker build -f crawler/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-crawler:latest .
        elif [ "${{ matrix.service }}" = "frontend" ]; then
          docker build -f frontend/Dockerfile -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest .
        fi
        docker images | grep ${{ env.IMAGE_NAME }}-${{ matrix.service }}

  # =============================================================================
  # 🔒 보안 스캔
  # =============================================================================
  security-scan:
    name: 🔒 보안 스캔
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 보안 스캔
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 🔒 Safety 보안 검사
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
        
    - name: 🔒 Bandit 보안 검사
      run: |
        pip install bandit
        bandit -r api/ crawler/ -f json -o bandit-report.json || true
        
    - name: 🔍 Semgrep 보안 검사
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"
        
    - name: 🔍 Trivy 취약점 스캔
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: 📊 SARIF 업로드
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()

  # =============================================================================
  # 🧪 통합 테스트
  # =============================================================================
  integration-test:
    name: 🧪 통합 테스트
    runs-on: ubuntu-latest
    needs: [docker-build-base, docker-build-services]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🧪 API 테스트
      run: |
        python -m pytest test_integration.py -v
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: postgres
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # =============================================================================
  # 🚀 배포
  # =============================================================================
  deploy:
    name: 🚀 배포
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐳 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 GitHub Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ 프로덕션 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.base
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📊 배포 완료 알림
      run: |
        echo "🚀 배포가 완료되었습니다!"
        echo "이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:${{ github.sha }}"
