name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # =============================================================================
  # 🔍 코드 품질 검사
  # =============================================================================
  code-quality:
    name: 📋 코드 품질 검사
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 Python 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        pip install -r api/requirements.txt
        pip install -r crawler/requirements.txt
        
    - name: 🎨 코드 포맷팅 검사 (Black)
      run: |
        black --check --diff api/ crawler/
        
    - name: 📝 Import 정렬 검사 (isort)
      run: |
        isort --check-only --diff api/ crawler/
        
    - name: 🔍 린팅 검사 (Flake8)
      run: |
        flake8 api/ crawler/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 api/ crawler/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 🔬 타입 검사 (MyPy)
      run: |
        mypy api/main.py --ignore-missing-imports || true

  # =============================================================================
  # 🐳 Docker 빌드 및 테스트
  # =============================================================================
  docker-build:
    name: 🐳 Docker 빌드
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        service: [base, api, crawler, frontend]
        
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐳 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 GitHub Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ Docker 이미지 빌드
      uses: docker/build-push-action@v5
      with:
        context: .
        file: |
          ${{ matrix.service == 'base' && './Dockerfile.base' || '' }}
          ${{ matrix.service == 'api' && './api/Dockerfile' || '' }}
          ${{ matrix.service == 'crawler' && './crawler/Dockerfile' || '' }}
          ${{ matrix.service == 'frontend' && './frontend/Dockerfile' || '' }}
        push: false
        tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # =============================================================================
  # 🔒 보안 스캔
  # =============================================================================
  security-scan:
    name: 🔒 보안 스캔
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 보안 스캔
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 보안 도구 설치
      run: |
        pip install safety bandit semgrep
        
    - name: 🛡️ 의존성 취약점 스캔 (Safety)
      run: |
        safety check -r api/requirements.txt -r crawler/requirements.txt || true
        
    - name: 🔍 보안 코드 분석 (Bandit)
      run: |
        bandit -r api/ -f json -o bandit-report.json || true
        bandit -r crawler/ -f json -o bandit-crawler-report.json || true
        
    - name: 📊 보안 스캔 결과 업로드
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          bandit-crawler-report.json

  # =============================================================================
  # 🧪 통합 테스트
  # =============================================================================
  integration-test:
    name: 🧪 통합 테스트
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐍 Python 설정
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: 📦 의존성 설치
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install pytest pytest-asyncio httpx
        
    - name: 🧪 통합 테스트 실행
      run: |
        python test_integration.py
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: test_db
        DB_USER: postgres
        DB_PASSWORD: test_password
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  # =============================================================================
  # 📦 프로덕션 배포
  # =============================================================================
  deploy:
    name: 🚀 프로덕션 배포
    runs-on: ubuntu-latest
    needs: [code-quality, docker-build, security-scan, integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐳 Docker Buildx 설정
      uses: docker/setup-buildx-action@v3
      
    - name: 🔐 GitHub Container Registry 로그인
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: 🏗️ 프로덕션 이미지 빌드 및 푸시
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-base:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-crawler:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: 📢 배포 완료 알림
      run: |
        echo "🚀 프로덕션 배포가 완료되었습니다!"
        echo "📦 이미지: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
        echo "🏷️ 태그: latest"

  # =============================================================================
  # 📊 성능 모니터링
  # =============================================================================
  performance-test:
    name: 📊 성능 테스트
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: 🐳 Docker Compose로 서비스 시작
      run: |
        docker-compose up -d --build
        
    - name: ⏱️ 서비스 준비 대기
      run: |
        sleep 30
        
    - name: 🧪 성능 테스트 실행
      run: |
        # API 응답 시간 테스트
        curl -w "@curl-format.txt" -o /dev/null -s "http://localhost:8000/health" || true
        
    - name: 📈 성능 메트릭 수집
      run: |
        echo "📊 성능 테스트 결과:"
        echo "- API 응답 시간: $(curl -w '%{time_total}' -o /dev/null -s http://localhost:8000/health)s"
        echo "- 메모리 사용량: $(docker stats --no-stream --format 'table {{.MemUsage}}' yt2-api)"
        
    - name: 🧹 정리
      if: always()
      run: |
        docker-compose down -v
